                   =====> INSTALLATION OF JENKINS <====
---------------------------------------------------------------------------------
Jenkins Installation for EC2 Server ::::::::
Install & Configure Jenkins Server :

	- Refer to that tools/Service's Official Documentation.
				https://www.jenkins.io/doc/book/installing/linux/

  1 -> Server Setup: Ubuntu 22.04 (AMI)
 # Update system
     sudo apt update -y

# Install Java
    sudo apt install openjdk-17-jdk -y

# Add Jenkins repo
    wget -q -O - https://pkg.jenkins.io/debian/jenkins.io.key | sudo apt-key add -
    sudo sh -c 'echo deb https://pkg.jenkins.io/debian binary/ > /etc/apt/sources.list.d/jenkins.list'

# Install Jenkins
    sudo apt update -y
    sudo apt install jenkins -y

# Start Jenkins
    sudo systemctl start jenkins
    sudo systemctl enable jenkins

# Check Jenkins status
    sudo systemctl status jenkins


# Default Installation Dir of Jenkin on Linux Box     
    /var/lib/jenkins 		  


# Open web browser 

http://<Public_IP_Address>:8080/

E.g.: http://15.207.19.193:8080/

# Show password :-
      sudo -i
      cat /var/lib/jenkins/secrets/initialAdminPassword
-> then open interface of jenkins and fill user name and password email id.


2- Global System Configurations ::::::::::-
  --> Define the default properties and external resource connections to Jenkins.
	    . Jenkins → Manage Jenkins → Global Tool Configuration
        . JDK (auto-detect or set manually)
        . Maven (install automatically)
           Git (already installed)
            --------> Make sure all are configured correctly.

 4- Create a Freestyle Job (basic build):::::::

     # to Jenkins Dashboard → New Item → Freestyle Project
     # Name: basic-job or as per 


:::::::::::::::: Operating System Commands (Starting/Stopping Jenkins) :::::::

=====>How you start and stop Jenkins depends on how it was installed.

======>If installed via Package Manager (e.g., Homebrew on Mac, APT/Yum on Linux):

1 ---> Linux (systemd-based, like Ubuntu 16.04+, CentOS 7+):
    sudo systemctl start jenkins
    sudo systemctl stop jenkins
    sudo systemctl restart jenkins
    sudo systemctl status jenkins

2 ---> macOS (Homebrew):
     brew services start jenkins
     brew services stop jenkins
     brew services restart jenkins
     brew services list | grep jenkins
----------------------------------------------------------------------------------
NODE::::-
:::::::: Jenkins Master–Slave (Agent/Node) Full Notes + Troubleshooting Guide :::::
          -> Part 1: Basic Understanding <-
 Role                               Job
Jenkins  -------->           Master	Web UI, Schedule jobs
Jenkins Slave (Agent)---->	 Runs jobs, builds, tests

-> Master controls the logic.
-> Slaves handle the heavy work.
--------------------------------------------------------------
                    Part 2: Requirements
---------------------------------------------------------------
 Master Node (Jenkins)                         Slave Node
---------------------------------------------------------------
 Jenkins Installed	                          SSH Server Installed
 Git, JDK (if needed)	                      Git, JDK, Maven
 Public/Private key pair (PEM format)	      .ssh/authorized_keys configured

---------------------------------------------------------------
           Part 3: Step-by-Step Setup (Master-Slave via SSH)
---------------------------------------------------------------

         A. On Jenkins Master:::::::

Switch to Jenkins user:-
sudo su - jenkins-----> Switch karte ho jenkins user ke under

Generate SSH key (PEM format):
ssh-keygen -t rsa -m PEM -b 4096

# Press Enter 3 times
Copy public key:
cat ~/.ssh/id_rsa.pub

Copy private key:
cat ~/.ssh/id_rsa
You'll use this in Jenkins UI.

        B. On Slave Node::::::::::::

Create user:
sudo useradd -m devops

Switch to user:
sudo su - devops

Set up SSH dir:-
mkdir -p ~/.ssh -------Ek folder banate hain jahan SSH key save hoti hai
chmod 700 ~/.ssh
nano ~/.ssh/authorized_keys  # Paste public key
chmod 600 ~/.ssh/authorized_keys

Install dependencies:
sudo apt update
sudo apt install openjdk-17-jdk git maven -y

Any issue go to ||Notes|

      C. Setup Node in Jenkins UI
Jenkins → Manage Jenkins → Manage Nodes → New Node

| Field                 | Value                                                    |
| --------------------- | -------------------------------------------------------- |
| Node Name             | devops-node                                              |
| Type                  | Permanent                                                |
| Remote root directory | /home/devops                                             |
| Labels                | devops                                                   |
| Host                  | 172.31.xx.xx ← **Private IP of slave**                   |
| Credentials           | SSH Username with Private Key (devops, paste id_rsa)     |
| Host Key Verification | Non-verifying                                            |
--> Save
          To Test It:-

pipeline {
  agent { label 'devops' }

  stages {
    stage('Test') {
      steps {
        sh 'whoami'
        sh 'java -version'
        sh 'mvn -version'
        sh 'git clone https://github.com/git/git.git'
      }
    }
  }
}



######### Troubleshooting ########

--> Node offline

Check:-
Slave IP correct? (Private IP)
User is devops?
SSH working manually?

--> Permission denied (publickey)

. Public key not in ~/.ssh/authorized_keys?
. Wrong permissions? Use:
     chmod 700 ~/.ssh
     chmod 600 ~/.ssh/authorized_keys

--> PEM problem: it is of unknown type

. Key is OpenSSH format, not PEM.
. Fix:
      ssh-keygen -t rsa -m PEM -b 4096
--> Git Clone stuck

 . No internet in slave EC2
 . Fix:
      . Attach IGW / NAT Gateway
       . Check outbound rules

    --> Node stays offline after saving
. Check console log in node config
. Check slave user shell: /bin/bash
. Check if slave has Java installed

NOTE::::::::-

| Command                   | Purpose                  |
| --------------------------| -----------------------  |
| sudo su - jenkins         | Go inside jenkins user   |
| mkdir ~/.ssh              | Create SSH config folder |
| chmod 700 ~/.ssh          | Set folder permission    |
| touch authorized_keys     | Create key list file     |
| chmod 600 authorized_keys | Secure file              |
| exit                      | Done!                    |


. Use PEM-formatted SSH keys for Jenkins credentials
. Always use private IPs within VPC for SSH connection
. Keep Jenkins master and slave in same region + subnet if possible
. Use labels to target jobs to specific nodes

      1: Manually try git clone on slave node
SSH into your slave node (as devops):-
      ssh devops@172.31.13.255 
      git clone https://github.com/git/git.git
2   How to Check If Git Repo Cloned?
      ssh devops@<slave-private-ip>
      cd ~/workspace/demo-devops-pipeline
      ls

Add SSH Credential for devops User (For Slave Node)
 Where:
Jenkins Dashboard → Manage Jenkins → Credentials
→ (Click on global store) → Add Credentials
| Field                             | Value                                                    |
| --------------------------------- | -------------------------------------------------------- |
| **Scope**                         | Global (Jenkins, nodes, items, all child items, etc)     |
| **ID** (optional)                 | devops-key (or leave blank, Jenkins auto-generates)      |
| **Description**                   | SSH Key for devops@slave-node                            |
| **Username**                      | devops                                                   |
| **Treat username as secret**      | (uncheck)                                               |
| **Private Key**                   | Choose: Enter directly                                   |
| **Key** (large text area appears) | Paste here:                                              |

cat /var/lib/jenkins/.ssh/id_rsa
(run this on Jenkins master, as jenkins user)

 The key should begin with:-
-----BEGIN RSA PRIVATE KEY-----
-----END RSA PRIVATE KEY-----

#---> enkins Master EC2 → SSH to Slave EC2

Both EC2s are in same AWS VPC (same region, same project)
So communication should use Private IP
| From       | To         | IP                    |
| ---------- | ---------- | --------------------- |
| Your Mac   | Master EC2 | Public IP             |
| Your Mac   | Slave EC2  | Public IP             |
| Master EC2 | Slave EC2  | Private IP (always) |



	Build Triggers :::
	
		- To Automate the Jenkins Pipeline Projects 
		
		
		-> Build Periodic					# https://crontab.guru/
		
			- Used to trigger the jenkins jobs irrespective of code change. - It is not meant for CI/CD.
			- The build is sheduled based on the crontab 
			
			Non-Prod Environments 										Prod Environment
			 Shd be available only during business hrs 
				DEV Servers 
				BUILD
				QA/UAT 														Prod Servers 
				
				
				8AM - 10PM 
		
		
		-> Github Webhook ::::::::
		
			- Used to trigger the jenkins Job whenever there is any commit happened in the remote repository
			- github webhook has be configured in the remote repository by using the jenkins URL
		
				payload url:	http://65.0.122.168:8080/github-webhook/
					- latest Jenkins 
						http://<Public_IP_Address>:8080/github-webhook/
		
		-> Poll-SCM ::::::
		
			- It is used to trigger the build based on the crontab only if there is any changes happened in the source-code repository.
			
			Eg.: 
			
				Test Cycles :::
				
				
				8AM - 12PM - 3PM 
				
		
		
		
	Email Notifications :::
	
	
		In Jenkins Pipeline Jobs, Email Notifications can be done as a post build action.
		
		
		Stage{}
		post{
			success 
			failure 
			abort
		}
		
To Setup the Email Notifications, First we need to set the Email Server in the Jenkins System configuration :


How to setup the Email Server in the Jenkins Config:

goto manage jenkins -> system configuration 

goto Email Notification 
		
SMTP Server :
smtp.gmail.com

SMTP Authentication

SMTP Port :: 465

Login to Gmail :::

Click Manage Account Settings

@Left side panel - select Security 

MFA --> mobile#

App Password = 16 bytes of App Password. vaufxdfsdf asdf ltzr

What ? window
Which Appln - email			

pipeline {
    agent { label 'slave1' }

    stages {
        stage('SCM Checkout') {
            steps {
                echo 'Perfomr SCM Check-Out'
				echo 'Cloning Java Maven App Code'
				git 'https://github.com/PL-DevOps-GenAI-0625/java-webapp-project.git'
            }
             post {
                failure {
                  sh "echo 'Send mail on failure'"
					mail bcc: 'l@gmail.com', body: 'Jenkins Jobs Status ', cc: 'l@gmail.com', from: '', replyTo: '', subject: 'SCM-Checkout Failed ', to: 'l@gmail.com'
					
					
                }
              }
        }
        stage('Java Application Build') {
            steps {
                echo 'Perform Java Maven Application Build'
                sh 'mvn clean package'
            }
             post {
                failure {
                  sh "echo 'Send mail on failure'"
					mail bcc: 'l@gmail.com', body: 'Jenkins Jobs Status ', cc: 'l@gmail.com', from: '', replyTo: '', subject: 'App Build Failed ', to: 'l@gmail.com'
                }
              }
        }
        stage('Deploy to Tomcat_Server') {
            steps {
                script{
					sshPublisher(publishers: [sshPublisherDesc(configName: 'QA-Tomcat_WAS', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: '', execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '.', remoteDirectorySDF: false, removePrefix: 'target/', sourceFiles: 'target/*.war')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
				}
                
            }
             post {
                failure {
                  sh "echo 'Send mail on failure'"
					mail bcc: 'l@gmail.com', body: 'Jenkins Jobs Status ', cc: 'l@gmail.com', from: '', replyTo: '', subject: 'App Deployment Failed ', to: 'l@gmail.com'
                }
                success {
                  sh "echo 'Send mail on Successful'"
					mail bcc: 'l@gmail.com', body: "jenkins-${JOB_NAME}-${BUILD_NUMBER}", cc: 'l@gmail.com', from: '', replyTo: '', subject: 'App Deployment Successful ', to: 'l@gmail.com'
                }
              }
        }
    }
}
